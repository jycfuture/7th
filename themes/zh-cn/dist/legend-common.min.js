// Alert 弹窗
function AlertPop(options) {
    var self = this;
    var defaults = {
        articleContent: '<article class="fs-14">内容</article>',
        btns: [
            '<div class="btn-2 btn-inline btn-sm btn-pill">yes</div>',
            '<div class="btn-1 btn-inline btn-sm btn-pill">no</div>'
        ],
        btnCallBack : [
            function(){},
            function(){}
        ],
        animateIn: 'flipInX',
        animateOut: 'flipOutX'
    };
    this.ele = {};
    this.settings = $.extend({}, defaults, options);
    this.init();
    return this;
}
AlertPop.prototype = {
    init: function(){
        var self = this;
        
        self.btnsHtml = '';
        for(var i=0; i<= self.settings.btns.length-1; i++){
            self.btnsHtml += self.settings.btns[i];
        }

        self.alertPopHtml = $('<div class="alertPop"><div class="alertPop-mask"></div><div class="alertPop-wrapper"><div class="ap-box ta-c lh-16em fs-16"><div class="ap-close"><img src="dist/images/icon_close.svg" /></div><div class="ap-content">'+ self.settings.articleContent +'</div><div class="ap-btns ta-c">'+ self.btnsHtml +'</div></div></div></div>');

        self.alertPopWrapperHtml = self.alertPopHtml.find('.alertPop-wrapper');
        self.alertPopBoxHtml = self.alertPopHtml.find('.ap-box');
        self.alertPopBtnsHtml = self.alertPopHtml.find('.ap-btns > *');

        if(self.settings.animateIn != '' || self.settings.animateIn != 'none' || self.settings.animateIn != false){
            self.alertPopBoxHtml.addClass('animated '+self.settings.animateIn)
        }
        $('body').append(self.alertPopHtml);

        self.events();
    },
    events: function(){
        var self = this;
        
        self.alertPopHtml.find('.ap-close, .alertPop-mask').bind('click', function(){
            self.destory();
        });

        self.alertPopBtnsHtml.each(function(index){
            $(this).bind('click', function(){
                self.destory();
                self.settings.btnCallBack[index]();
            })
        });
    },
    destory: function(){
        var self = this;
        var time = null;
        if(self.settings.animateIn == '' || self.settings.animateIn == 'none' || self.settings.animateIn == false){
            self.alertPopHtml.remove();
        }
        else {
            self.alertPopBoxHtml.removeClass(self.settings.animateIn).addClass(self.settings.animateOut);
            time = setTimeout(function(){
                self.alertPopHtml.remove();
                clearTimeout(time);
                time = null;
            }, 1100);
        }
    }
};
;// loadingPop
function ToastPop(options) {
    var self = this;
    var defaults = {
        status: 'success',
        content: '<span class="color-white fs-20 ta-c">加载中……</span>',
        autohide: false,
        animateIn: 'fadeIn',
        animateOut: 'fadeOut',
        callback: false,
        contentfixed: true,
        width: '100%',
        height: '100%'
    };
    this.settings = $.extend({}, defaults, options);
    this.ele = {};
    this.init();
    return this;
}
ToastPop.prototype = {
    init: function(){
        var self = this;
        self.ele.toastPop = $('<div class="pop-toast '+ (self.settings.contentfixed ? 'pop-toast-no-static' : 'pop-toast-static') +' pop-toast-'+ self.settings.status +'" style="width:'+ self.settings.width +'; height:'+ self.settings.height +';"><div class="pop-toast-box">'+ self.settings.content +'</div></div>');

        $('body').append(self.ele.toastPop);
        setTimeout(function(){
            if(self.settings.callback != '' && self.settings.callback != false && self.settings.callback != 'none'){
                self.settings.callback(self);
            }
            self.autohide();
        }, 100);
    },
    autohide: function(){
        var self = this;
        if(self.settings.autohide != '' && self.settings.autohide != false && self.settings.autohide != 'none'){
            setTimeout(function(){
                self.destory();
            }, self.settings.autohide);
        }
    },
    destory: function(){
        var self = this;
        $(self.ele.toastPop).fadeOut(function(){
            $(self.ele.toastPop).remove();
        });
    }
};
;// tipPop
function TipPop(options) {
    var self = this;
    var defaults = {
        articleContent: '',
        status: 'info',
        callBack: function(){},
        animateIn: 'flipInX',
        animateOut: 'flipOutX'
    };
    this.settings = $.extend({}, defaults, options);
    this.init();
    return this;
}
TipPop.prototype = {
    init: function(){
        var self = this;
        
        self.statusContent = '';
        switch (self.settings.status) {
            case 'success' :
                self.statusContent = '<i class="icon-'+ self.settings.status +' icon-tipPop"></i>';
                break;
            default :
                self.statusContent = '<i class="icon-'+ self.settings.status +' icon-tipPop"></i>';
                break;
        }

        self.tipPopHtml = $('<div class="tipPop"><div class="tipPop-mask"></div><div class="tipPop-wrapper"><div class="tp-box ta-c lh-16em fs-16"><div class="tp-close"><img src="dist/images/icon_close.svg" /></div><div class="tp-status">'+ self.statusContent +'</div><div class="tp-content">'+ self.settings.articleContent +'</div></div></div></div>');

        self.tipPopWrapperHtml = self.tipPopHtml.find('.tipPop-wrapper');
        self.tipPopBoxHtml = self.tipPopHtml.find('.tp-box');

        if(self.settings.animateIn != '' || self.settings.animateIn != 'none' || self.settings.animateIn != false){
            self.tipPopBoxHtml.addClass('animated '+self.settings.animateIn)
        }
        $('body').append(self.tipPopHtml);

        self.events();
    },
    events: function(){
        var self = this;
        self.tipPopHtml.find('.tp-close, .tipPop-mask').bind('click', function(){
            self.destory();
        });
    },
    destory: function(){
        var self = this;
        var time = null;
        if(self.settings.animateIn == '' || self.settings.animateIn == 'none' || self.settings.animateIn == false){
            self.tipPopHtml.remove();
        }
        else {
            self.tipPopBoxHtml.removeClass(self.settings.animateIn).addClass(self.settings.animateOut);
            time = setTimeout(function(){
                self.tipPopHtml.remove();
                clearTimeout(time);
                time = null;
                self.settings.callBack();
            }, 1100);
        }
    }
};
;/*
 * legend common plugin
 * Author: lijundong
 */

function Legend() {
  return this;
}
Legend.prototype.init = function(){
    this.tipClose();
    this.pop.init();
};


Legend.prototype.setCookie = function(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
};
Legend.prototype.getCookie = function(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
    }
    return "";
};
Legend.prototype.delCookie = function(name) {
    this.setCookie(name, "", -1);
};


Legend.prototype.pop = {
    size : function(){
        $('.com-pop').css({
            height: 'auto'
        });
        var h = $('.com-pop').outerHeight(true);
        if(h > $(window).height()){
            h = $(window).height();
        }
        if(h % 2 !== 0){
            $('.com-pop').css({
                height: h+1
            })
        }
    },
    close : function(){
        $('.com-pop, .com-pop-mask').fadeOut();
    },
    open : function(ele){
        var _this = this;
        if(ele != ''){
            $('.change-'+ ele).show().siblings().hide();
        }else{
            $('.change-name').eq(0).show().siblings().hide();
        }
        $('.com-pop, .com-pop-mask').fadeIn(function(){
            _this.size();
        });
    },
    init: function(){
        var _this = $(this);
        $('.com-pop-close, .com-pop-mask').bind('click', function(){
            _this.close();
        });
    }
};


Legend.prototype.alertPop = function(options){
    var alertPop = new AlertPop(options);
    return alertPop;
};


Legend.prototype.tipPop = function(options){
    var tipPop = new TipPop(options);
    return tipPop;
};


Legend.prototype.toastPop = function(options){
    var toast = new ToastPop(options);
    return toast;
};


Legend.prototype.evenHeight = function(ele){
    $(ele).outerHeight('auto');
    var h = $(ele).outerHeight();
    if(h >= $(window).height()){
        $(ele).outerHeight($(window).height());
    }
    if(h % 2 != 0){
        $(ele).outerHeight(h+1);
    }
};


Legend.prototype.tipClose = function(options){
    var defaults = {
        animateIn: 'fadeIn',
        animateOut: 'fadeOut'
    };
    var settings = $.extend({}, defaults, options);
    $('body .tip-close').each(function(){
        $(this).bind('click', function(){
            $(this).parent().removeClass(settings.animateIn).addClass(settings.animateOut);
            setTimeout(function(){
                $(this).parent().remove();
            }, 1000);
        });
    });
};


;(function($){
    window.legend = new Legend();
    var time = null;
    $(window).resize(function(){
        clearTimeout(time);
        time = setTimeout(function(){
            legend.pop.size();
            time = null;
        });
    });
})(jQuery);
